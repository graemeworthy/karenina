#!/usr/bin/env ruby
require 'curses'

require 'stringio'
require 'rspec/core'
require File.expand_path('../../lib/karenina', __FILE__)

class Scroller

  def initialize(stringio, height)
    @io = stringio
    @offset = 0
    @height = 15
  end

  def num_lines
    @io.rewind
    @io.lines.map{|x|}.length
  end

  def up
    @offset -= 1 unless @offset.zero?
  end

  def down
    @offset += 1 unless @offset + @height > num_lines
  end

  def to_str
    lines = []
    @io.rewind
    @io.lines.collect{|l| lines << l}
    bottom = @height+@offset < lines.length ? @height+@offset : lines.length
    top    = @offset
    #output = "top: #{top}, bottom: #{bottom}, lines: #{num_lines}"
    lines[top..bottom].join("\n")
  end

end

class SpecRunner
  def initialize(collector)
    @tests_output = collector || StringIO.new
  end
  def run
      RSpec::Core::Runner.run(["./"], @tests_output, @tests_output)
  end
  def output
    if @test_output.kind_of? (StringIO)
      @tests_output.rewind
      @tests_output.read
    else
      @tests_output.to_str
    end

  end
end

def init_screen

Curses.noecho # do not show typed keys
Curses.timeout = 0 # do not block and wait for input
Curses.init_screen
  Curses.stdscr.keypad(true) # enable arrow keys
  begin
    yield
  ensure
    Curses.close_screen
  end
end

def write(line, column, text)
  Curses.setpos(line, column)
  Curses.addstr(text);
end


def novel_display(text)
  write(0,0, text)
end

def warning_display(text)
  write(12,0, text)
end


def test_display(text)
  write(14q,0, text)
end

init_screen do

  karenina =  Karenina::Reader.new
  collector = StringIO.new
  spec_runner   =  SpecRunner.new(collector)
  scroller = Scroller.new(collector, Curses.cols)
  threads = []
  threads << Thread.new {spec_runner.run}

  loop do
    Curses.clear
    novel_display(karenina)
    warning_display('press q to exit, not ctrl-c it will mess things up')
    test_display(scroller)
      case Curses.getch
      when Curses::Key::UP   then scroller.up
      when Curses::Key::DOWN then scroller.down
      when ?j  then karenina.down
      when ?k  then karenina.up
      when ?q then break
      end


  end
end